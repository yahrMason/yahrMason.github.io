```julia
using Random, StatsBase # for stats
using Plots, StatsPlots # for plots
using Distributions, Turing # for MCMC
```

```julia
# Define Normal Distribution
mu_true = 4;
sd_true = 2;
dist = Normal(mu_true, sd_true);

# Sample from the distribution
N = 100;
Random.seed!(1234);
data = rand(dist, N);
```


```julia
# Define Turing Model
@model function normal_model(y)
	# Priors
	mu ~ Normal(0,1)
	sigma ~ Exponential(1)

	# Likelihood
	J = length(y)
	for i in 1:J
		y[i] ~ Normal(mu, sigma)
	end
end;
```

```julia
# Sample from Posterior
n_chains = 4;
n_samples = 1000;
chain = sample(
	normal_model(data), 
	NUTS(), 
	MCMCThreads(), 
	n_samples, 
	n_chains
);

plot(chain)
```

```julia
# Define animation
# only pull every 5th draw
anim = @animate for i in 5:5:n_samples

	# pull chains to plot
	chain_plt = chain[["mu", "sigma"]][1:i, :, :]

	# define plot
	base_plt = plot(
		xlabel = "mu", 
		ylabel = "sigma", 
		legend=:bottomleft,
		legendtitle = "Chain"
	)

	# add annotations
	annotate!(
		base_plt, 
		0.925*max(chain_plt[:,1,:]...), 
		0.975*max(chain_plt[:,2,:]...), 
		"Draws: $i"
	)

	# Marginal densities
	density_plt_mu = plot(legend=false, axis=([],false))
	density_plt_sigma = plot(legend=false, axis=([],false))

	# plot the chains
	for chain_num in 1:n_chains
		plot!(
			base_plt,
			chain_plt[:,1,c],
			chain_plt[:,2,c],
			label = "$c",
			alpha = 0.25
		)
	end 

	# Mu Density
	y_mu = vec(chain_plt["mu"].data);
	x_mu = min(y_mu...):0.1:max(y_mu...);
	y_mu_den = diff(ecdf(y_mu).(x_mj));
	plot!(
		density_plt_mu, 
		x_mu[1:length(y_mu_den)], 
		y_mu_den
	)

	# Sigma Density
	# y2 = chain_plt["sigma"].data[:,c];
	y_sigma = vec(chain_plt["sigma"].data);
	x_sigma = min(y_sigma...):0.1:max(y_sigma...);
	y_sigma_den = diff(ecdf(y_sigma).(x_sigma));
	plot!(d2, y_sigma_den, x2[1:length(y_sigma_den)])

	# end

	# add true values
	vline!(d1, [mu_true]);
	#annotate!(d1, mu_true, 0., "True Value");

	hline!(d2, [sd_true]);
	#annotate!(d2, 0., sd_true, "True Value");

	# this code plots the marginal densities
	# next to the plot
	layout = @layout [a    _
					b{0.8w,0.8h} c]
	plot(
		density_plt_mu,
		base_plt,
		density_plt_sigma, 
		layout = layout, 
		link = :both, 
		orientation = [:v :v :h], 
		size = (500, 500), 
		marign = 10Plots.px
	)
end

# pass animation to gif: n frames per second
gif(anim, fps = 17)
```

